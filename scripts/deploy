#!/usr/bin/env bash

set -euo pipefail

SCRIPTS_DIR="$(dirname "${BASH_SOURCE[0]}")"
. "${SCRIPTS_DIR}/../bash-lib/init"

[[ -z "${INFRAPOOL_STACK_NAME}" ]] && bl_die "INFRAPOOL_STACK_NAME must be set before running ${0}"
TEMPLATE_FILE="${TEMPLATE_FILE:-"${SCRIPTS_DIR}/../cloudformation.yml"}"
PARAMS_FILE="${PARAMS_FILE:-params.json}"

wait_for_create(){
  aws cloudformation wait stack-create-complete --stack-name "${INFRAPOOL_STACK_NAME}"
}

export LOG_GROUP="${INFRAPOOL_STACK_NAME}-conjur-log-group"
"${SCRIPTS_DIR}"/tail_ecs_logs &
LOG_TAIL_PID="${!}"
trap 'kill -9 ${LOG_TAIL_PID} || true' EXIT

echo "Creating stack ${INFRAPOOL_STACK_NAME} with parameters file ${PARAMS_FILE}"

echo "Initiating Stack Creation"
STACK_ARN="$(aws cloudformation create-stack \
  --stack-name "${INFRAPOOL_STACK_NAME}" \
  --template-body file://"${TEMPLATE_FILE}" \
  --parameters file://"${PARAMS_FILE}" \
  --capabilities CAPABILITY_NAMED_IAM \
  --output json \
    | tee create_stack.log \
    | jq -r .StackId)"

echo "Stack ARN: ${STACK_ARN}"

echo "Waiting for stack creation to complete"
# Wait twice incase the initial create takes longer than an hour.
if wait_for_create || wait_for_create; then
  echo "Stack Creation Complete"
  exit_code=0
else
  echo "Stack Creation Failed, recording resources and logs"
  exit_code=1
fi

echo "Recoding Stack Events in stack_events.json"
aws cloudformation describe-stack-events \
  --output json \
  --stack-name "${STACK_ARN}" \
  > stack_events.json \
  ||:

echo "Recoridng Stack Resources in stack_resources.json"
aws cloudformation describe-stack-resources \
  --output json \
  --stack-name "${STACK_ARN}" \
  > stack_resources.json \
  ||:

kill "${LOG_TAIL_PID}" || true
echo "Checking for log tail pid:"
ps "${LOG_TAIL_PID}" || true

exit "${exit_code}"
