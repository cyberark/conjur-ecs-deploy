#!/usr/bin/env bash

set -uo pipefail

# This script prepares the admin password and parameters files then
# scripts/deploy should be called to run the actual deploy

SCRIPTS_DIR="$(dirname "${BASH_SOURCE[0]}")"
. "${SCRIPTS_DIR}/../bash-lib/init"

STACK_NAME="${STACK_NAME:-"conjur-ecs-deploy-${RANDOM}"}"
CONJUR_IMAGE="${CONJUR_IMAGE:-"cyberark/conjur:edge"}"
SUB_DOMAIN="${SUB_DOMAIN:-"${STACK_NAME}"}"
ADMIN_PASSWORD_SECRET_NAME="${ADMIN_PASSWORD_SECRET_NAME:-${STACK_NAME}_adminpassword}"
ADMIN_PASSWORD_METADATA_FILE="admin_password_meta.json"
CONJUR_DATAKEY_SECRET_NAME="${CONJUR_DATAKEY_SECRET_NAME:-Generate}"
CONJUR_DATAKEY_METADATA_FILE="conjur_datakey_meta.json"
CONJUR_DBPASSWORD_SECRET_NAME="${CONJUR_DBPASSWORD_SECRET_NAME:-Generate}"
CONJUR_DBPASSWORD_METADATA_FILE="conjur_dbpassword_meta.json"
PARAMS_TEMPLATE="${PARAMS_TEMPLATE:-${SCRIPTS_DIR}/params.template.json}"
AUTO_SCALING_TARGET="${AUTO_SCALING_TARGET:-50}"
AUTO_SCALING_METRIC="${AUTO_SCALING_METRIC:-ECSServiceAverageMemoryUtilization}"
PUMA_THREADS="${PUMA_THREADS:-5}"
CONTAINER_PROCESSES="${CONTAINER_PROCESSES:-40}"
CONTAINER_CPU="${CONTAINER_CPU:-2048}"
CONTAINER_MEMORY="${CONTAINER_MEMORY:-8192}"
MAX_CONTAINERS="${MAX_CONTAINERS:-6}"
MIN_CONTAINERS="${MIN_CONTAINERS:-2}"
CONJUR_AUTHENTICATORS="${CONJUR_AUTHENTICATORS:-}"

# Generate a random string of characters in a specific character class (according to tr)
# Used to generate conjur admin password if the secret doesn't already exist.
rand_range() {
  local range="${1}"
  local num_chars="${2}"
  LC_CTYPE=C tr -dc "${range}" </dev/urandom | fold -w "${num_chars}" | head -n1 ||:
}

get_secret_metadata(){
  secret_id="${1}"
  metadata_file="${2}"
  aws secretsmanager describe-secret \
    --output json \
    --secret-id "${secret_id}" | tee "${metadata_file}"
  rc="${?}"

  if grep -q "DeletedDate" "${metadata_file}"; then
    echo "${secret_id} exists but is pending deletion so not readable. "
    echo "Please restore the secret, or specify a different secret name"
    exit 1
  fi

  return "${rc}"
}

get_admin_password_metadata(){
  get_secret_metadata "${ADMIN_PASSWORD_SECRET_NAME}" "${ADMIN_PASSWORD_METADATA_FILE}"
}

resolve_secret_name(){
  secret_name="${1}"
  metadata_file="${2}"

  # Info prints in this function must be sent to stderr as stdout is expected
  # to contain the secret ARN or "Generate"

  # If the value is Generate, pass that straight through to the template.
  # Otherwise resolve the secret name to an ARN.
  if [[ "${secret_name}" != "Generate" ]]; then
    get_secret_metadata "${secret_name}" "${metadata_file}" 1>&2
    ARN="$(jq -r .ARN < "${metadata_file}")"
    echo "Secret ${secret_name} resolved to ${ARN}" 1>&2
    # return the arn
    echo -n "${ARN}"
  else
    echo "Passing Generate through to cloudformation template" 1>&2
    # return Generate
    echo -n "Generate"
  fi
}

echo "Resolving Docker Image to SHA"
ORIGINAL_CONJUR_IMAGE="${CONJUR_IMAGE}"
docker pull "${CONJUR_IMAGE}"
CONJUR_IMAGE="$(docker inspect --format='{{index .RepoDigests 0}}' "${CONJUR_IMAGE}")"
echo "${ORIGINAL_CONJUR_IMAGE} resolved to ${CONJUR_IMAGE}"
echo "${CONJUR_IMAGE}" > conjur_image

# Extract the git commit the conjur git commit from image and store it as a file, so it can be
# collected as a Jenkins artifact, ignore failure because older conjur images don't contain the commit
# file.
echo -n "Conjur container git commit: "
docker run --rm --entrypoint bash "${CONJUR_IMAGE}" -c 'cat conjur_git_commit' | tee conjur_git_commit ||:
echo

# Find or create the conjur admin password secret in asm
# The admin password is handled seperately from the db password and datakey as we may have to generate it.
if get_admin_password_metadata; then
    echo "Secret ${ADMIN_PASSWORD_SECRET_NAME} already exists, not recreating"
else
  echo "Generating And Storing Admin Password"
  # Password Policy: 12-128 characters, 2 uppercase letters, 2 lowercase letters, 1 digit and 1 special character
  ADMIN_PASSWORD="$(rand_range 'a-z' 10)$(rand_range 'A-Z' 10)$(rand_range '[:punct:]' 10)$(rand_range '0-9' 10)"
  aws secretsmanager create-secret \
    --name "${ADMIN_PASSWORD_SECRET_NAME}" \
    --secret-string "${ADMIN_PASSWORD}" \
    --output json \
      | tee create_secret.log
  unset ADMIN_PASSWORD
  bl_retry_constant 5 10 get_admin_password_metadata
fi
# At this point the admin password exists in ASM and metadata has been written
# to disk so extract the ARN.
ADMIN_PASSWORD_ARN="$(jq -r .ARN < "${ADMIN_PASSWORD_METADATA_FILE}" )"

CONJUR_DATAKEY_ARN="$(resolve_secret_name "${CONJUR_DATAKEY_SECRET_NAME}" "${CONJUR_DATAKEY_METADATA_FILE}")"
CONJUR_DBPASSWORD_ARN="$(resolve_secret_name "${CONJUR_DBPASSWORD_SECRET_NAME}" "${CONJUR_DBPASSWORD_METADATA_FILE}")"

echo "Templating Parameters File"
sed \
  -e "s+%CONJUR_IMAGE%+${CONJUR_IMAGE}+" \
  -e "s+%CONJUR_AUTHENTICATORS%+${CONJUR_AUTHENTICATORS}+" \
  -e "s/%SUB_DOMAIN%/${SUB_DOMAIN}/" \
  -e "s/%ADMIN_PASSWORD_ARN%/${ADMIN_PASSWORD_ARN}/" \
  -e "s/%CONJUR_DATAKEY_ARN%/${CONJUR_DATAKEY_ARN}/" \
  -e "s/%CONJUR_DBPASSWORD_ARN%/${CONJUR_DBPASSWORD_ARN}/" \
  -e "s/%DOMAIN_NAME%/${DOMAIN_NAME}/" \
  -e "s/%DOMAIN_ID%/${DOMAIN_ID}/" \
  -e "s/%AUTO_SCALING_TARGET%/${AUTO_SCALING_TARGET}/" \
  -e "s/%AUTO_SCALING_METRIC%/${AUTO_SCALING_METRIC}/" \
  -e "s/%PUMA_THREADS%/${PUMA_THREADS}/" \
  -e "s/%CONTAINER_PROCESSES%/${CONTAINER_PROCESSES}/" \
  -e "s/%CONTAINER_CPU%/${CONTAINER_CPU}/" \
  -e "s/%CONTAINER_MEMORY%/${CONTAINER_MEMORY}/" \
  -e "s/%MAX_CONTAINERS%/${MAX_CONTAINERS}/" \
  -e "s/%MIN_CONTAINERS%/${MIN_CONTAINERS}/" \
  < "${PARAMS_TEMPLATE}" \
  > params.json
