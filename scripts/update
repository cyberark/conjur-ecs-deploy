#!/usr/bin/env bash

set -euo pipefail

SCRIPTS_DIR="$(dirname "${BASH_SOURCE[0]}")"
. "${SCRIPTS_DIR}/../bash-lib/init"

[[ -z "${INFRAPOOL_STACK_NAME}" ]] && bl_die "INFRAPOOL_STACK_NAME must be set before running ${0}"
TEMPLATE_FILE="${TEMPLATE_FILE:-"${SCRIPTS_DIR}/../cloudformation.yml"}"
PARAMS_FILE="${PARAMS_FILE:-params.json}"

wait_for_update(){
  aws cloudformation wait stack-update-complete --stack-name "${INFRAPOOL_STACK_NAME}"
}

echo "Updating stack ${INFRAPOOL_STACK_NAME} with parameters file ${PARAMS_FILE}"

# The conjur_image file contains an image reference but with tags resolved to the SHA.
# Read proposed image, extract running image from ECS and compare to see if an update
# is required.
PROPOSED_CONJUR_IMAGE="$(< conjur_image)"
TASK_DEFINITION_ARN="$(aws cloudformation describe-stack-resources \
  --output json \
  --stack-name "${INFRAPOOL_STACK_NAME}" \
  | jq -r '.StackResources[] | select(.ResourceType | contains("AWS::ECS::TaskDefinition")).PhysicalResourceId')"

DEPLOYED_CONJUR_IMAGE="$(aws ecs describe-task-definition \
  --output json \
  --task-definition "${TASK_DEFINITION_ARN}" \
  | jq -r '.taskDefinition.containerDefinitions[0].image')"

if [[ "${DEPLOYED_CONJUR_IMAGE}" == "${PROPOSED_CONJUR_IMAGE}" ]] && [[ "${ALLOW_UPDATE_WITH_SAME_IMAGE:-false}" == "false" ]]; then
  echo "Deployed and proposed conjur images are both ${DEPLOYED_CONJUR_IMAGE}, skipping update."
  echo "Please set ALLOW_UPDATE_WITH_SAME_IMAGE=YES if you need to run an update with the same image."
  exit 0
else
  echo "Deployed Conjur Image: ${DEPLOYED_CONJUR_IMAGE}"
  echo "Proposed Conjur Image: ${PROPOSED_CONJUR_IMAGE} (Resolved from requested image: ${CONJUR_IMAGE})"
fi

echo "Initiating Stack Update"
aws cloudformation update-stack \
  --stack-name "${INFRAPOOL_STACK_NAME}" \
  --template-body file://"${TEMPLATE_FILE}" \
  --parameters file://"${PARAMS_FILE}" \
  --capabilities CAPABILITY_NAMED_IAM \
  --output json \
    | tee update_stack.log

echo "Waiting for stack update to complete"
# Wait twice incase the first times out.
if wait_for_update || wait_for_update; then
  echo "Stack Update Complete"
  exit_code=0
else
  echo "Stack Update Failed, recording resources and logs"
  exit_code=1
fi

echo "Recoding Stack Events in stack_events.json"
aws cloudformation describe-stack-events \
  --output json \
  --stack-name "${INFRAPOOL_STACK_NAME}" \
  > stack_events.json \
  ||:

echo "Recoridng Stack Resources in stack_resources.json"
aws cloudformation describe-stack-resources \
  --output json \
  --stack-name "${INFRAPOOL_STACK_NAME}" \
  > stack_resources.json \
  ||:

exit "${exit_code}"
