---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E3008
        - E1029
Parameters:
  VpcCIDR:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.0.0/16
    Description: The CIDR block for the VPC
  PrivateSubnetCIDR1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.1.0/24
    Description: The CIDR block for the private subnet in first AZ
  PrivateSubnetCIDR2:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.2.0/24
    Description: The CIDR block for the private subnet in second AZ
  PublicSubnetCIDR1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.10.0/24
    Description: The CIDR block for the public subnet in first AZ
  PublicSubnetCIDR2:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.11.0/24
    Description: The CIDR block for the public subnet in second AZ
  AvailabilityZone1:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZone2:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  ConjurImage:
    Type: String
    Default: 'cyberark/conjur:edge'
    Description: The Conjur Docker image. It must be v1.11.6+.
  DomainName:
    Type: String
  SubDomain:
    Type: String
    Default: myservice
  HostedZoneId:
    Type: String
    Description: The HostedZoneId of the DomainName provided
  ConjurAdminPasswordARN:
    Type: String
    Description: >-
      Amazon Resource Name of an Secrets Manager secret.
      This secret will be used to set the Conjur admin user's password.
      Note that the console stores ASM secrets as JSON by default, but this
      value should refer to a non-JSON raw string secret.
    AllowedPattern: "^arn:aws:secretsmanager:.*"
  ConjurDataKeyARN:
    Type: String
    Default: "Generate"
    Description: >-
      Amazon Resource Name of an Secrets Manager secret.
      This secret will be used to set the conjur data key.
      If the value is "Generate", then a new conjur data key will be generated.
  ConjurDBPasswordARN:
    Type: String
    Default: "Generate"
    Description: >-
      Amazon Resource Name of an Secrets Manager secret.
      This secret will be used to set the conjur Admin Password.
      If the value is "Generate", then a new conjur admin password will be generated.
  MinContainers:
    Type: Number
    Default: 2
    MinValue: 1
    Description: Min Conjur instances in cluster
  MaxContainers:
    Type: Number
    Default: 10
    MinValue: 1
    Description: Max Conjur instances in cluster
  AutoScalingTargetValue:
    Type: Number
    Default: 50
    Description: Target value for metric specified in AutoScalingMetric
  AutoScalingMetric:
    Type: String
    Default: ECSServiceAverageMemoryUtilization
    Description: Metric to track when scaling containers up/down
    AllowedValues:
      - ECSServiceAverageCPUUtilization
      - ECSServiceAverageMemoryUtilization
      - ALBRequestCountPerTarget
  PumaThreads:
    Type: Number
    Default: 5
    MinValue: 1
    Description: Number of threads per puma process
  ContainerProcesses:
    Type: Number
    Default: 40
    MinValue: 1
    Description: Number of puma processes per container
  ContainerCPU:
    Type: Number
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
    Default: 2048
    Description: |
      CPU units to allocate to each container.
      See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html
      for valid CPU  & Memory combinations.
  ContainerMemory:
    Type: Number
    Default: 8192
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
    Description: Memory units to allocate to each container
  DBMaxConnections:
    Type: Number
    Default: 2000
    MaxValue: 8388607
    MinValue: 6
    Description: |
      Maximum number of simultaneous connections the RDS Postgres Database should accept
      By default this is the memory of the instance in bytes / some value that depends
      on the db family (engine, engine version). For conjur-ecs deploy it works out
      at about 350 with a 4GB RDS instance. A rule of thumb for setting this value
      is: MaxContainers * ContainerProcesses * PumaThreads * 1.25git
      The 1.25 is to leave reserved connections for replicas and admins.
      For the defaults thats 6 * 50 * 5 * 1.25 = 1875, which I've rounded up to 2000.
      See: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.MaxConnections
  ElbPrefixListId:
    Type: String
    Default: ''
    Description: |
      This prefix list will be added to the elb security group, so only requests with a source IP that matches
      an entry in the prefix list will be allowed.
  ElbCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: |
      Requests from this CIDR will be allowed to access the load balancer. If you wish to restrict
      access to this conjur instance by IP, please override this CIDR. For finer control, specify
      a prefix list id in ElbPrefixListId. Note that if ElbPrefixListId is specified then this
      parameter is ignored.
  ConjurAuthenticators:
    Type: String
    Description: |
      Comma separated list of authenticators (as defined in policy), without the conjur/ prefix.
      Eg for an authenticator policy conjur:policy:conjur/authn-oidc/cybr-identity,
      ConjurAuthenticatators="authn-oidc/cybr-identity"

Conditions:
  GenerateDataKey: !Equals
    - !Ref ConjurDataKeyARN
    - Generate
  GenerateDBPassword: !Equals
    - !Ref ConjurDBPasswordARN
    - Generate
  ElbUsePrefixList: !Not [!Equals [!Ref ElbPrefixListId, ""]]

Resources:
  ConjurDataKey:
    Condition: GenerateDataKey
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Conjur Data Key
      Name: !Sub '${AWS::StackName}-conjur_key'
      GenerateSecretString:
        PasswordLength: 32
        ExcludePunctuation: true
  # ConjurAdminPassword:
  #   Type: 'AWS::SecretsManager::Secret'
  #   Properties:
  #     Description: Conjur Admin User Password
  #     Name: conjur_key
  #     GenerateSecretString:
  #       PasswordLength: 120
  #       RequireEachIncludedType: true
  ConjurDBPassword:
    Condition: GenerateDBPassword
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Conjur DB Password
      Name: !Sub '${AWS::StackName}-ConjurDBPassword'
      GenerateSecretString:
        PasswordLength: 12
        ExcludePunctuation: true
  PostgresSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub '${AWS::StackName} Enable access from Conjur'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ContainerSecurityGroup
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}--ContainerSecurityGroup'
      GroupDescription: Security group for NGINX container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt
            - LoadBalancerSecurityGroup
            - GroupId
      VpcId: !Ref VpcId
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}- - Security group for LB'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !If [ElbUsePrefixList, !Ref "AWS::NoValue", !Ref ElbCidr]
          SourcePrefixListId: !If [ElbUsePrefixList, !Ref ElbPrefixListId, !Ref "AWS::NoValue"]
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AWS::StackName}-conjur-cluster'
  Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-conjur-fargate-role'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource:
              - !Ref ConjurAdminPasswordARN
              - !If
                - GenerateDBPassword
                - !Ref ConjurDBPassword
                - !Ref ConjurDBPasswordARN
              - !If
                - GenerateDataKey
                - !Ref ConjurDataKey
                - !Ref ConjurDataKeyARN
      Roles:
        - !Ref FargateExecutionRole
  FargateExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-conjur-fargate-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  AutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-service-auto-scaling-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-service-auto-scaling-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:DeleteAlarms'
                Resource:
                  - '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      RoleARN: !GetAtt
        - AutoScalingRole
        - Arn
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt
            - Service
            - Name
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
  ScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-conjur-auto-scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: !Ref AutoScalingMetric
        TargetValue: !Ref AutoScalingTargetValue
        ScaleInCooldown: 5
        ScaleOutCooldown: 30
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: conjur-deployment-task
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref FargateExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ConjurContainer'
          Image: !Ref ConjurImage
          EntryPoint:
            - /bin/bash
            - '-c'
          Command:
            - >-
                set +o history;
                history -c;
                if [[ "$(base64 -d <<<"${CONJUR_KEY}" |wc -c |sed 's/[^0-9]*//')" == 32 ]]; then
                  echo "Passing through CONJUR_DATA_KEY without b64 encoding";
                  export CONJUR_DATA_KEY="${CONJUR_KEY}";
                elif [[ "$( echo -n "${CONJUR_KEY}" | wc -c | sed 's/[^0-9]*//')" == 32 ]]; then
                  echo "Base64 encoding the supplied value for CONJUR_DATA_KEY";
                  export CONJUR_DATA_KEY="$( echo -n "${CONJUR_KEY}" | base64)";
                else
                  echo "Invalid CONJUR_KEY must be 32 bytes. Can optionally be base64 encoded.";
                fi;
                export DATABASE_URL="postgres://conjur:${ConjurDBPassword}@${DBEndpoint}:${DBPort}/postgres";
                mkdir -p /puma;
                openssl req -x509 -newkey rsa:4096 -keyout /puma/key.pem -out /puma/cert.pem -days 365 -subj "/CN=localhost" -nodes;
                conjurctl server --port 443 --bind "ssl://0.0.0.0:443?key=/puma/key.pem&cert=/puma/cert.pem" &
                echo "conjurctl wait doesn't support ssl :( so use curl in a loop";
                until curl -k https://localhost/ |grep -i "your conjur server is running"; do echo "Waiting for conjur to come up"; sleep 1; done;
                AdminApiKey="$(conjurctl account create conjur | awk -F': ' '/^API/{print $2}')";
                curl -k --request PUT --data "${ConjurAdminPassword}" --user "admin:${AdminApiKey}" https://localhost/authn/conjur/password;
                sleep infinity
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DBEndpoint
              Value: !GetAtt
                - ConjurDB
                - Endpoint.Address
            - Name: DBPort
              Value: !GetAtt
                - ConjurDB
                - Endpoint.Port
            - Name: RAILS_ENV
              Value: production
            - Name: TRUSTED_PROXIES
              Value: !Sub '${PublicSubnetCIDR1},${PublicSubnetCIDR2}'
            - Name: WEB_CONCURRENCY
              Value: !Ref ContainerProcesses
            - Name: RAILS_MAX_THREADS
              Value: !Ref PumaThreads
            - Name: CONJUR_AUTHENTICATORS
              Value: !Ref ConjurAuthenticators
          Secrets:
            - Name: CONJUR_KEY
              ValueFrom: !If
                - GenerateDataKey
                - !Ref ConjurDataKey
                - !Ref ConjurDataKeyARN
            - Name: ConjurDBPassword
              ValueFrom: !If
                - GenerateDBPassword
                - !Ref ConjurDBPassword
                - !Ref ConjurDBPasswordARN
            - Name: ConjurAdminPassword
              ValueFrom: !Ref ConjurAdminPasswordARN
      RequiresCompatibilities:
        - FARGATE
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - Listener
      - Policy
    Properties:
      ServiceName: !Sub '${AWS::StackName}-conjur-service'
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref MinContainers
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ConjurContainer'
          ContainerPort: 443
          TargetGroupArn: !Ref TargetGroup
  VpcId:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VpcId
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR1
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR2
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone2
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Postgres subnet
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NatGateway2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Routes (AZ1)'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Routes (AZ2)'
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      TargetType: ip
      Name: !Sub '${AWS::StackName}-ConjurTG'
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  LBLogsBucket:
    Type: AWS::S3::Bucket
    # The bucket is deleted by the cleanup script because cloudformation
    # can't remove non-empty buckets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'org-conjur-${AWS::StackName}-alb-log-bucket'
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: ExpireLBLogs
            ExpirationInDays: 60
            Status: Enabled
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'LBLogsBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ALBAccessLogs20130930put
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'LBLogsBucket', /, Logs, /AWSLogs/, !Ref 'AWS::AccountId', /*]]
            Principal:
              AWS: '127311923021'
            Action: ['s3:PutObject']
          - Sid: ALBAccessLogs20130930get
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'LBLogsBucket', /, Logs, /AWSLogs/, !Ref 'AWS::AccountId', /*]]
            Principal:
              AWS: !Ref 'AWS::AccountId'
            Action: ['s3:GetObject']
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: LogsBucketPolicy
    Properties:
      Name: !Ref 'AWS::StackName'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      LoadBalancerAttributes:
        # Its important that the idle timeout is lower than the target's timeout (puma).
        # Otherwise the webserver may timeout a session at the same time the lb is sending
        # a request, which leads to seemingly random 502 errors. Conjur sets puma's timeout
        # to 80, so this value must be <80. The LB uses this as an upperbound on  waiting
        # for responses, so it needs to be as high enough to allow complex policy loads.
        - Key: idle_timeout.timeout_seconds
          Value: "55"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref LBLogsBucket
        - Key: access_logs.s3.prefix
          Value: Logs

  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt
          - LoadBalancer
          - DNSName
        HostedZoneId: !GetAtt
          - LoadBalancer
          - CanonicalHostedZoneID
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub '${SubDomain}.${DomainName}'
      Type: A
  Certificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08
      Certificates:
        - CertificateArn: !Ref Certificate
  LoadBalancerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref Listener
      Priority: 1

  ConjurDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: DB Params for conjur-ecs-deploy RDS Postgres instances
      Family: postgres15
      Parameters:
        max_connections: !Ref DBMaxConnections

  ConjurDB:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBParameterGroupName: !Ref ConjurDBParameterGroup
      DBName: !Ref 'AWS::StackName'
      Engine: postgres
      EngineVersion: "15.3"
      AllocatedStorage: "20"
      StorageType: gp2
      DBInstanceClass: db.t3.medium
      MasterUsername: conjur
      MasterUserPassword: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !If
            - GenerateDBPassword
            - !Ref ConjurDBPassword
            - !Ref ConjurDBPasswordARN
          - '}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup
      BackupRetentionPeriod: 14
      AutoMinorVersionUpgrade: true
      DeleteAutomatedBackups: true
      MultiAZ: true
      EnablePerformanceInsights: true
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-conjur-log-group'
      RetentionInDays: 90
Outputs:
  LBLogsBucket:
    Description: S3 Bucket URL for the LB access logs
    Value: !GetAtt  LBLogsBucket.Arn
